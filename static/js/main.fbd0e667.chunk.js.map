{"version":3,"sources":["coponents/Navbar/Navbar.module.css","coponents/common/c1-SuperInputText/SuperInputText.module.css","coponents/Modals/Modal.module.css","coponents/common/c8-SuperDoubleRange/SuperDoubleRange.module.css","coponents/common/c3-SuperCheckbox/SuperCheckbox.module.css","coponents/common/c2-SuperButton/SuperButton.module.css","coponents/Login/Login.module.css","coponents/Registration/Registration.module.css","coponents/RecoveryPassword/RecoveryPassword.module.css","coponents/EnterNewPassword/EnterNewPassword.module.css","coponents/Test/Test.module.css","coponents/404/Error404.module.css","api/api.ts","coponents/common/c1-SuperInputText/SuperInputText.tsx","coponents/common/c3-SuperCheckbox/SuperCheckbox.tsx","coponents/common/c2-SuperButton/SuperButton.tsx","redux/auth-reducer.ts","coponents/common/assets/images/preloader.svg","coponents/common/Preloader/Preloader.tsx","coponents/Login/Login.tsx","coponents/Registration/Registration.tsx","coponents/Profile/Profile.tsx","redux/recoveryPass-reducer.ts","coponents/RecoveryPassword/RecoveryPassword.tsx","coponents/EnterNewPassword/EnterNewPassword.tsx","coponents/Modals/Modal.tsx","coponents/Modals/ModalContainer.tsx","coponents/Test/Test.tsx","coponents/404/Error404.tsx","redux/packs-request-reducer.ts","redux/packs-reducer.ts","coponents/common/c8-SuperDoubleRange/SuperDoubleRange.tsx","redux/cards-request-reducer.ts","redux/cards-reducer.ts","coponents/Modals/ModalEducation/ModalEducationContainer.tsx","coponents/Packs/Packs.tsx","coponents/Packs/PacksContainer.tsx","coponents/Packs/Cards/Cards.tsx","coponents/Packs/Cards/CardsContainer.tsx","Routes.tsx","coponents/Navbar/Navbar.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["module","exports","ResultCodeStatuses","SuperInputText","value","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","className","onChangeFocus","placeholder","restProps","useState","errorInt","setErrorInt","useEffect","onFocusHandler","finalSpanClassName","s","finalInputClassName","inputGen","errorInput","superInput","e","currentTarget","key","onFocus","onBlur","SuperCheckbox","onChangeChecked","children","checkbox","checked","SuperButton","red","finalClassName","default","instance","axios","create","baseURL","withCredentials","authAPI","post","email","password","rememberMe","delete","message","resetPasswordToken","packsAPI","data","get","params","cardsPack","id","newNamePack","put","_id","name","cardsAPI","card","grade","cardId","card_id","initialState","avatar","publicCardPacksCount","created","Date","updated","isAdmin","verified","isLoggedIn","isLoading","setAuthUserDataAC","payload","setErrorAC","setIsLoadingAC","getAuthUserDataTC","dispatch","then","res","catch","response","window","location","finally","Preloader","src","preloader","alt","Login","props","login","setLogin","setPassword","setChecked","loading","useSelector","state","auth","useDispatch","wrapper","onClick","loginTC","checkLenghtPass","length","correctPassword","correctConfPassword","confPassword","isEmail","val","test","Registration","setEmail","setConfPassword","errorPass","setErrorPass","errorConfPass","setErrorConfPass","errorEmail","setErrorEmail","validation","pasword","registerTC","disabled","some","Profile","statusRequest","setStatusAC","status","RecoveryPassword","recoveryPas","recoveryPasAC","recoveryPasTC","EnterNewPassword","token","useParams","setNewPassTC","Modal","showModal","setInput1","input1","setInput2","input2","backgraund","modal","icon","ModalContainer","setShowModal","Test","addPackName","setAddPackName","alert","Error404","container","packName","min","max","sortPacks","page","pageCount","user_id","isMyPacks","getPacksReqTC","getState","setDataPack","packsReq","setCardPacks","cardPacks","setCurrentPage","setTotalCardPacksCount","cardPacksTotalCount","maxCardsCount","minCardsCount","currentPage","AirbnbSlider","withStyles","root","color","height","padding","thumb","width","backgroundColor","border","marginTop","marginLeft","marginRight","active","track","borderRadius","rail","Slider","AirbnbThumbComponent","SuperDoubleRange","onChangeRange","step","text","ThumbComponent","getAriaLabel","index","event","newValue","console","log","cardAnswer","cardQuestion","cardsPack_id","sortCards","getCardsReqTC","cardsReq","setDataCards","setCards","cards","setCurrentPageCards","setTotalCardsCount","cardsTotalCount","maxGrade","minGrade","packUserId","grades","getCard","sum","reduce","acc","rand","Math","random","i","newSum","ModalEducationContainer","idPack","isClose","getCards","showAnswer","setShowAnswer","first","setFirst","answer","question","rating","shots","__v","setCard","onNext","setGrade","updateGrade","style","fontStyle","fontWeight","display","marginBottom","map","g","fontSize","Packs","value1","setValue1","value2","setValue2","showModalEducation","setShowModalEducation","setPackName","ceil","pagesSize","reqUserID","isMyPacksHandler","Pagination","count","onPageChanged","variant","changeFilter","resetFilter","addCardsPack","c","cardsCount","userId","deleteCardsPack","updateCardsPack","to","PATH","CARDS","connect","me","getPacks","addPack","deletePack","updatePack","setIsMyPack","getAuthUser","pageNumber","Cards","setCardQuestion","setCardAnswer","arrayPageCount","push","addCard","deleteCard","updateCard","idCard","LOGIN","REGISTRATION","PROFILE","RECOVERY_PASSWORD","ENTER_NEW_PASSWORD","TEST","CARD_PACKS","LEARN","Routes","path","exact","render","Navbar","nav","item","activeClassName","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbd0e667.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3DW3o\",\"item\":\"Navbar_item__pw1xy\",\"active\":\"Navbar_active__2L7OK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SuperInputText_wrapper__2Ue9x\",\"inputGen\":\"SuperInputText_inputGen__29kRN\",\"superInput\":\"SuperInputText_superInput__1ba-9\",\"errorInput\":\"SuperInputText_errorInput__3aSR0\",\"error\":\"SuperInputText_error__1Vh94\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backgraund\":\"Modal_backgraund__1Muo1\",\"modal\":\"Modal_modal__38vyr\",\"icon\":\"Modal_icon__2RHFr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"SuperDoubleRange_root__2KCIM\",\"text\":\"SuperDoubleRange_text__1yR37\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__3-8IW\",\"spanClassName\":\"SuperCheckbox_spanClassName__3t0jc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__3ODAE\",\"red\":\"SuperButton_red__1d8t9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__3XtJt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Registration_wrapper__1PWDs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"RecoveryPassword_wrapper__23bHv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"EnterNewPassword_wrapper__3S_29\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Test_wrapper__2k3xt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Error404_container__5HOFT\"};","import axios from \"axios\";\r\nimport {useSelector} from \"react-redux\";\r\nimport { TokenType } from \"../redux/recoveryPass-reducer\";\r\nimport {AppStateType} from \"../redux/store\";\r\nimport {CardReqType, CardsReqType, NewPackType, PacksReqType, PacksType} from \"../types/entities\";\r\n\r\nconst instance = axios.create({\r\n    // baseURL: 'http://localhost:7542/2.0/',\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true\r\n})\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.post('auth/me')\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post('auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/me')\r\n    },\r\n    register(email: string, password: string) {\r\n        return instance.post('/auth/register', {email, password})\r\n    },\r\n    recoveryPass(email: string) {\r\n        return instance.post<ResponseType>('auth/forgot', {\r\n            email: email,\r\n            message:\r\n                `<div style=\"background-color: lime; padding: 15px\"> +\r\n                password recovery link:\r\n                <a href='http://localhost:3000/#/enter_new_password/$token$'>link</a></div>`//Поменять на сервер\r\n        });\r\n    },\r\n    setNewPass(password: string, resetPasswordToken: TokenType) {\r\n        return instance.post<ResponseType>('set-new-password', {\r\n            password,\r\n            resetPasswordToken});\r\n    }\r\n}\r\n\r\n// const cardsPack = {\r\n//     name: \"My new cards pack\",\r\n//     path: \"/def\",\r\n//     grade: 0,\r\n//     shots: 0,\r\n//     rating: 0,\r\n//     deckCover: \"url or base64\",\r\n//     private: false,\r\n//     type: \"pack\"\r\n// }\r\n\r\nexport const packsAPI = {\r\n    getPacks(data:PacksReqType) {\r\n        return instance.get( '/cards/pack', {params:{...data}})\r\n    },\r\n    addPack(data:NewPackType) {\r\n        return instance.post('/cards/pack', {cardsPack:{...data}})\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`/cards/pack?id=${id}`)\r\n    },\r\n    updatePack(id: string, newNamePack: string) {\r\n        return instance.put('/cards/pack', {\r\n            cardsPack: {\r\n                _id: id,\r\n                name: newNamePack\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const cardsAPI = {\r\n\r\n    getCards(data:CardsReqType){\r\n        return instance.get( '/cards/card', {params:{...data}})\r\n    },\r\n    addCards(data:CardReqType){\r\n        return instance.post('/cards/card', {card:{...data}})\r\n    },\r\n    deleteCards(id:string){\r\n        return instance.delete(`/cards/card?id=${id}`)\r\n    },\r\n    updateCards(data:CardReqType){\r\n        return instance.put('/cards/card', {card:{...data}})\r\n    },\r\n    updateGrade (grade: number, cardId: string){\r\n        return instance.put('/cards/grade', {grade, card_id:cardId})\r\n    }\r\n}\r\n\r\n\r\n// Types\r\n// type PacksTypes = {\r\n//\r\n// }\r\n\r\ntype ResponseType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\nexport enum ResultCodeStatuses {\r\n    Success = 0,\r\n    Error = 1,\r\n    Captcha = 10\r\n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent, useEffect, useState} from 'react'\nimport s from './SuperInputText.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    onChangeFocus?: (value: boolean) => void\n    spanClassName?: string\n    placeholder?:string\n\n}\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {   value,\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange,\n        onChangeText,\n        onKeyPress,\n        onEnter,\n        error,\n        className,\n        spanClassName,\n        onChangeFocus,\n        placeholder,\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const [errorInt, setErrorInt] = useState(error)\n    useEffect(()=>{\n        setErrorInt(error)\n    }, [error])\n\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\n        onChangeText && onChangeText(e.currentTarget.value)\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n        onEnter // если есть пропс onEnter\n        && e.key === 'Enter' // и если нажата кнопка Enter\n        && onEnter() // то вызвать его\n    }\n    const onFocusHandler = (value:boolean) => {\n        onChangeFocus && onChangeFocus(value)\n        // value?setErrorInt(''):setErrorInt(error)\n    }\n\n\n\n\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\n    const finalInputClassName = `${s.inputGen} ${errorInt?s.errorInput: s.superInput}`\n\n    return (\n        <>\n            <input\n                value={value?value:''}\n                type={type?type:'text'}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n                onFocus={()=>{onFocusHandler(true); setErrorInt('')}}\n                onBlur={()=>{onFocusHandler(false); setErrorInt(error)}}\n                placeholder={placeholder}\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {errorInt && <span className={finalSpanClassName}>{errorInt}</span>}\n        </>\n    )\n}\n\nexport default SuperInputText\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\nimport s from './SuperCheckbox.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n}\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange,\n        onChangeChecked,\n        className,\n        spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e);\n        onChangeChecked && onChangeChecked(e.currentTarget.checked);\n        // сделайте так чтоб работал onChange и onChangeChecked\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\n\n    return (\n        <label>\n            <input\n                type={'checkbox'}\n                onChange={onChangeCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    )\n}\n\nexport default SuperCheckbox\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\nimport s from './SuperButton.module.css'\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red,\n        className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${red ? s.red : ''} ${className} ${s.default}`\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    )\n}\n\nexport default SuperButton\n","import {useHistory} from \"react-router-dom\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {PATH} from \"../Routes\";\r\nimport {DispathActionType, NewPackType} from \"../types/entities\";\r\nimport {AppStateType} from \"./store\";\r\n\r\nconst initialState = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    avatar: '',\r\n    publicCardPacksCount: 0,\r\n    created: new Date(),\r\n    updated: new Date(),\r\n    isAdmin: false,\r\n    verified: false,\r\n    rememberMe: false,\r\n    error: '',\r\n    isLoggedIn: false,\r\n    isLoading: false\r\n}\r\n\r\nexport const authReducer = (state: AuthStateType = initialState, action: DispathActionType): AuthStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, ...action.payload}\r\n        case 'login/ERROR':\r\n            return {...state, error: action.error}\r\n        case 'login/SET-IS-LOADING':\r\n            return {...state, isLoading: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserDataAC = (payload: AuthStateType) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', payload} as const)\r\n\r\nexport const setErrorAC = (error: string) =>\r\n    ({type: 'login/ERROR', error} as const)\r\n\r\nexport const setIsLoadingAC = (value: boolean) => {\r\n    return {\r\n        type: 'login/SET-IS-LOADING',\r\n        value\r\n    } as const\r\n}\r\n\r\nexport const getAuthUserDataTC = () => (dispatch: Dispatch<DispathActionType>) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    authAPI.me()\r\n        .then((res) => {\r\n            dispatch(setAuthUserDataAC(res.data))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setErrorAC(error))\r\n            // @ts-ignore\r\n            window.location = \"#/login\"\r\n        })\r\n        .finally(() => dispatch(setIsLoadingAC(false)))\r\n}\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean) => (dispatch: Dispatch<DispathActionType>) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    authAPI.login(email, password, rememberMe)\r\n        .then((res) => {\r\n            dispatch(setAuthUserDataAC(res.data))\r\n            dispatch(setErrorAC(''))\r\n            // @ts-ignore\r\n            window.location = \"#/profile\"\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setErrorAC(error))\r\n        })\r\n        .finally(() => dispatch(setIsLoadingAC(false)))\r\n\r\n}\r\nexport const registerTC = (email: string, pasword: string) => (dispatch: Dispatch<DispathActionType>) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    authAPI.register(email, pasword)\r\n        .then((res) => {\r\n            dispatch(setErrorAC(''))\r\n            // @ts-ignore\r\n            window.location = \"#/login\"\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setErrorAC(error))\r\n        })\r\n        .finally(() => dispatch(setIsLoadingAC(false)))\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<DispathActionType>) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            dispatch(setAuthUserDataAC({\r\n                _id: '',\r\n                email: '',\r\n                name: '',\r\n                avatar: '',\r\n                publicCardPacksCount: 0,\r\n                created: new Date(),\r\n                updated: new Date(),\r\n                isAdmin: false,\r\n                verified: false,\r\n                rememberMe: false,\r\n                error: '',\r\n                isLoggedIn: false,\r\n                isLoading: false\r\n            }))\r\n            dispatch(setErrorAC(''))\r\n            // @ts-ignore\r\n            window.location = \"#/login\"\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setErrorAC(error))\r\n        })\r\n        .finally(() => dispatch(setIsLoadingAC(false)))\r\n}\r\n\r\nexport const recoveryPasTC = (email: string) => {\r\n    return (dispatch: Dispatch<DispathActionType>) => {\r\n        dispatch(setIsLoadingAC(true))\r\n        authAPI.recoveryPass(email)\r\n            .then((res) => {\r\n                console.log(res)\r\n                // dispatch(recoveryPasAC(email))\r\n                // dispatch(setStatusAC('succeeded'))\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n\r\n                // dispatch(setStatusAC('failed'))\r\n\r\n            })\r\n        dispatch(setIsLoadingAC(false))\r\n    }\r\n}\r\n\r\n//types\r\nexport type AuthStateType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number,\r\n    created: Date,\r\n    updated: Date,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean,\r\n    error: string,\r\n    isLoggedIn: boolean\r\n    isLoading: boolean\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/preloader.556f229a.svg\";","import React from \"react\";\r\nimport preloader from \"../../common/assets/images/preloader.svg\";\r\n\r\nconst Preloader = () => {\r\n    return <img src={preloader} alt=\"preloader\"/>\r\n}\r\n\r\nexport default Preloader","import React, {useState} from \"react\";\r\nimport SuperInputText from \"../common/c1-SuperInputText/SuperInputText\";\r\nimport SuperCheckbox from \"../common/c3-SuperCheckbox/SuperCheckbox\";\r\nimport SuperButton from \"../common/c2-SuperButton/SuperButton\";\r\nimport s from \"./Login.module.css\"\r\nimport {getAuthUserDataTC, loginTC} from \"../../redux/auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\nconst Login: React.FC<any> = (props) => {\r\n    const [login, setLogin] = useState<string>('kapron4ik@gmail.com')\r\n    const [password, setPassword] = useState<string>('12345678')\r\n    const [checked, setChecked] = useState<boolean>(false)\r\n    const loading = useSelector<AppStateType, boolean>((state) => state.auth.isLoading)\r\n    const error = useSelector<AppStateType, string>((state) => state.auth.error)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onLoginHandler = () => {\r\n        dispatch(loginTC(login, password, checked))\r\n    }\r\n\r\n    return <div className={s.wrapper}>\r\n        <h1>LOGIN</h1>\r\n        {loading\r\n            ? <Preloader/>\r\n            : (<>\r\n                <SuperInputText\r\n                    value={login}\r\n                    onChangeText={setLogin}\r\n                />\r\n                <SuperInputText\r\n                    value={password}\r\n                    type={'password'}\r\n                    onChangeText={setPassword}\r\n                />\r\n                <SuperCheckbox\r\n                    checked={checked}\r\n                    onChangeChecked={setChecked}>Запомнить меня</SuperCheckbox>\r\n                <SuperButton\r\n                    onClick={onLoginHandler}>Войти</SuperButton>\r\n                {error?<div>{error}</div>:''}\r\n            </>)}\r\n    </div>\r\n}\r\n\r\nexport default Login","import React, {useState} from \"react\";\r\nimport SuperInputText from \"../common/c1-SuperInputText/SuperInputText\";\r\nimport {loginTC, registerTC} from \"../../redux/auth-reducer\";\r\nimport SuperButton from \"../common/c2-SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport s from \"./Registration.module.css\"\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\nexport const checkLenghtPass = (value: string) => {\r\n    if (value.length < 8) {\r\n        // setErrorPass('пароль должен быть больше 8 символов')\r\n        // return false\r\n        return 'пароль должен быть больше 8 символов'\r\n    } else {\r\n        // setErrorPass('')\r\n        // return true\r\n        return ''\r\n    }\r\n}\r\n\r\nexport const correctPassword = (value: string, password: string) => {\r\n    if (password !== value) {\r\n        // setErrorConfPass('пароли не совпадают')\r\n        // return false\r\n        return 'пароли не совпадают'\r\n    } else {\r\n        // setErrorConfPass('')\r\n        // return true\r\n        return ''\r\n    }\r\n}\r\n\r\nexport const correctConfPassword = (value: string, confPassword: string) => {\r\n    if (confPassword !== value) {\r\n        // setErrorConfPass('пароли не совпадают')\r\n        // return false\r\n        return 'пароли не совпадают'\r\n    } else {\r\n        // setErrorConfPass('')\r\n        // return true\r\n        return ''\r\n    }\r\n}\r\n\r\nexport const isEmail = (val: string) => {\r\n    let regEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (regEmail.test(val)) {\r\n        // setErrorEmail('')\r\n        // return true\r\n        return ''\r\n    } else {\r\n        // setErrorEmail('не корректный email')\r\n        // return false\r\n        return 'не корректный email'\r\n    }\r\n}\r\n\r\nconst Registration: React.FC<any> = (props) => {\r\n    const [email, setEmail] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n    const [confPassword, setConfPassword] = useState<string>('')\r\n    const [errorPass, setErrorPass] = useState<string>('')\r\n    const [errorConfPass, setErrorConfPass] = useState<string>('')\r\n    const [errorEmail, setErrorEmail] = useState<string>('')\r\n    const error = useSelector<AppStateType, string>((state) => state.auth.error)\r\n    const loading = useSelector<AppStateType, boolean>((state) => state.auth.isLoading)\r\n\r\n    const validation = [email !== '', password !== '', confPassword !== '', errorEmail === '', errorPass === '', errorConfPass === '']\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const onRegistrationHandler = () => {\r\n        dispatch(registerTC(email, password))\r\n    }\r\n\r\n    const onChangeEmailHandler = (value: string) => {\r\n        setEmail(value)\r\n        setErrorEmail(isEmail(value))\r\n    }\r\n\r\n    const onChangePasswordHandler = (value: string) => {\r\n        setPassword(value)\r\n        // checkLenghtPass(value)\r\n        setErrorPass(checkLenghtPass(value))\r\n        // correctConfPassword(value)\r\n        setErrorConfPass(correctConfPassword(value, confPassword))\r\n    }\r\n\r\n    const onChangeConfPasswordHandler = (value: string) => {\r\n        setConfPassword(value)\r\n        // correctPassword(value)\r\n        setErrorConfPass(correctPassword(value, password))\r\n    }\r\n\r\n    return <div className={s.wrapper}>\r\n        <h1>Registration</h1>\r\n        {loading\r\n            ? <Preloader/>\r\n            : <>\r\n                <SuperInputText\r\n                    value={email}\r\n                    onChangeText={onChangeEmailHandler}\r\n                    placeholder='введите email'\r\n                    error={errorEmail}\r\n                />\r\n                <SuperInputText\r\n                    value={password}\r\n                    type={'password'}\r\n                    onChangeText={onChangePasswordHandler}\r\n                    placeholder='введите пароль 8 символов'\r\n                    error={errorPass}\r\n                />\r\n                <SuperInputText\r\n                    value={confPassword}\r\n                    type={'password'}\r\n                    onChangeText={onChangeConfPasswordHandler}\r\n                    placeholder='подтвердите пароль'\r\n                    error={errorConfPass}\r\n                />\r\n                <SuperButton onClick={onRegistrationHandler}\r\n                             disabled={validation.some(e => !e)}>Зарегестрироваться</SuperButton>\r\n                {error ? <div>{error}</div> : ''}\r\n            </>\r\n        }\r\n    </div>\r\n\r\n}\r\n\r\nexport default Registration","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AuthStateType, getAuthUserDataTC, logoutTC} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport SuperButton from \"../common/c2-SuperButton/SuperButton\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\nconst Profile: React.FC<any> = (props) => {\r\n    const dispatch = useDispatch()\r\n    const auth = useSelector<AppStateType, AuthStateType>(state => state.auth)\r\n    const loading = useSelector<AppStateType, boolean>((state) => state.auth.isLoading)\r\n\r\n    useEffect(() => {\r\n        dispatch(getAuthUserDataTC())\r\n    }, [])\r\n\r\n    return <div>\r\n        {loading\r\n            ? <Preloader/>\r\n            : <>\r\n                <h1>Profile</h1>\r\n                <div>\r\n                    <span>name - </span>{auth.name}\r\n                </div>\r\n                <div>\r\n                    <span>publicCardPacksCount - </span>{auth.publicCardPacksCount}\r\n                </div>\r\n                <SuperButton\r\n                    onClick={() => {\r\n                        dispatch(getAuthUserDataTC())\r\n                    }\r\n                    }>Me</SuperButton>\r\n                <SuperButton\r\n                    onClick={() => {\r\n                        dispatch(logoutTC())\r\n                    }\r\n                    }>Выйти</SuperButton>\r\n            </>}\r\n    </div>\r\n}\r\n\r\nexport default Profile","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {setErrorAC, setIsLoadingAC} from \"./auth-reducer\";\r\nimport {DispathActionType} from \"../types/entities\";\r\n\r\nexport type RequestErrorType = string | null\r\nexport type TokenType = string | undefined //????\r\nexport type StatusRequestType = 'succeeded' | 'failed' | null\r\n\r\nconst initialState = {\r\n    email: '' as string,\r\n    // error: null as RequestErrorType,\r\n    statusRequest: null as StatusRequestType,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const recoveryPasReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'RECOVERY-PASS/SET-EMAIL':\r\n            return {...state, email: action.email}\r\n        case 'RECOVERY-PASS/SET-STATUS':\r\n            return {...state, statusRequest: action.status}\r\n        // case 'RECOVERY-PASS/SET-ERROR':\r\n        //     return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const recoveryPasAC = (email: string) =>\r\n    ({type: 'RECOVERY-PASS/SET-EMAIL', email} as const)\r\nexport const setStatusAC = (status: StatusRequestType) =>\r\n    ({type: 'RECOVERY-PASS/SET-STATUS', status} as const)\r\n// export const setErrorAC = (error: string) =>\r\n//     ({type: 'RECOVERY-PASS/SET-ERROR', error} as const)\r\n\r\nexport const recoveryPasTC = (email: string) => (dispatch: Dispatch<DispathActionType>) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    authAPI.recoveryPass(email)\r\n        .then((res) => {\r\n            dispatch(recoveryPasAC(email))\r\n            dispatch(setStatusAC('succeeded'))\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setErrorAC(error))\r\n        })\r\n        .finally(() => dispatch(setIsLoadingAC(false)))\r\n}\r\n\r\nexport const setNewPassTC = (password: string, resetPasswordToken: TokenType) => (dispatch: Dispatch<DispathActionType>) => {\r\n    dispatch(setIsLoadingAC(true))\r\n    authAPI.setNewPass(password, resetPasswordToken)\r\n        .then((res) => {\r\n            // @ts-ignore\r\n            window.location = \"#/login\"\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            dispatch(setErrorAC(error))\r\n        })\r\n        .finally(() => dispatch(setIsLoadingAC(false)))\r\n\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof recoveryPasAC> |\r\n    ReturnType<typeof setStatusAC> |\r\n    ReturnType<typeof setErrorAC>","import React, {useEffect, useState} from \"react\";\r\nimport SuperInputText from \"../common/c1-SuperInputText/SuperInputText\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport SuperButton from \"../common/c2-SuperButton/SuperButton\";\r\nimport {recoveryPasTC, StatusRequestType} from \"../../redux/recoveryPass-reducer\";\r\nimport s from \"./RecoveryPassword.module.css\"\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {isEmail} from \"../Registration/Registration\";\r\nimport {getAuthUserDataTC, setErrorAC} from \"../../redux/auth-reducer\";\r\n\r\nconst RecoveryPassword: React.FC<any> = (props) => {\r\n    const [email, setEmail] = useState<string>('')\r\n    const [errorEmail, setErrorEmail] = useState<string>('')\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(setErrorAC(''))\r\n    }, [])\r\n    const status = useSelector<AppStateType, StatusRequestType>((state) => state.recoveryPas.statusRequest)\r\n    const error = useSelector<AppStateType, string>((state) => state.auth.error)\r\n    const loading = useSelector<AppStateType, boolean>((state) => state.auth.isLoading)\r\n\r\n    const onRecoveryPassHandler = () => {\r\n        dispatch(recoveryPasTC(email))\r\n    }\r\n\r\n    const onChangeEmailHandler = (value: string) => {\r\n        setEmail(value)\r\n        setErrorEmail(isEmail(value))\r\n    }\r\n\r\n    return <div className={s.wrapper}>\r\n        {loading\r\n            ? <Preloader/>\r\n            : <>\r\n                <h1>Recovery password</h1>\r\n                <SuperInputText\r\n                    value={email}\r\n                    onChangeText={onChangeEmailHandler}\r\n                    placeholder='введите email'\r\n                    error={errorEmail}\r\n                />\r\n                <SuperButton\r\n                    onClick={onRecoveryPassHandler}\r\n                    disabled={errorEmail ? true : false}\r\n                >Восстановить</SuperButton>\r\n                {error ? <div>{error}</div> : ''}\r\n                {status === \"succeeded\" ?\r\n                    <div>Дальнейшая инструкция по восстановлению выслана на указанную электронную почту</div> : ''}\r\n            </>}\r\n    </div>\r\n}\r\n\r\nexport default RecoveryPassword","import React, {useState} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport SuperInputText from \"../common/c1-SuperInputText/SuperInputText\";\r\nimport {checkLenghtPass, correctConfPassword, correctPassword} from \"../Registration/Registration\";\r\nimport SuperButton from \"../common/c2-SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setNewPassTC} from \"../../redux/recoveryPass-reducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport s from \"./EnterNewPassword.module.css\"\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\nconst EnterNewPassword: React.FC<any> = (props) => {\r\n    const {token} = useParams<{ token?: string }>()\r\n    const [password, setPassword] = useState<string>('')\r\n    const [confPassword, setConfPassword] = useState<string>('')\r\n    const [errorPass, setErrorPass] = useState<string>('')\r\n    const [errorConfPass, setErrorConfPass] = useState<string>('')\r\n    const error = useSelector<AppStateType, string>((state) => state.auth.error)\r\n    const loading = useSelector<AppStateType, boolean>((state) => state.auth.isLoading)\r\n\r\n    const validation = [password !== '', confPassword !== '', errorPass === '', errorConfPass === '']\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangePasswordHandler = (value: string) => {\r\n        setPassword(value)\r\n        setErrorPass(checkLenghtPass(value))\r\n        setErrorConfPass(correctConfPassword(value, confPassword))\r\n    }\r\n\r\n    const onChangeConfPasswordHandler = (value: string) => {\r\n        setConfPassword(value)\r\n        setErrorConfPass(correctPassword(value, password))\r\n    }\r\n\r\n    const onNewPasswordHandler = () => {\r\n        dispatch(setNewPassTC(password, token))\r\n    }\r\n\r\n    return <div className={s.wrapper}>\r\n        {loading\r\n            ? <Preloader/>\r\n            : <>\r\n                <h1>Enter new password</h1>\r\n                <SuperInputText\r\n                    value={password}\r\n                    type={'password'}\r\n                    onChangeText={onChangePasswordHandler}\r\n                    placeholder='введите пароль 8 символов'\r\n                    error={errorPass}\r\n                />\r\n                <SuperInputText\r\n                    value={confPassword}\r\n                    type={'password'}\r\n                    onChangeText={onChangeConfPasswordHandler}\r\n                    placeholder='подтвердите пароль'\r\n                    error={errorConfPass}\r\n                />\r\n                <SuperButton onClick={onNewPasswordHandler}\r\n                             disabled={validation.some(e => !e)}>Отправить</SuperButton>\r\n                {error ? <div>{error}</div> : ''}\r\n            </>}\r\n    </div>\r\n}\r\n\r\nexport default EnterNewPassword","import React, {useEffect} from \"react\";\r\nimport s from \"./Modal.module.css\"\r\n\r\ntype PropsType = {\r\n    showModal: (value: boolean) => void\r\n    setInput1?: (cardQuestion: string)=>void\r\n    input1?: string\r\n    setInput2?: (cardAnswer: string)=>void\r\n    input2?: string\r\n}\r\n\r\nconst Modal: React.FC<PropsType> = (\r\n    {\r\n        showModal,\r\n        setInput1,\r\n        input1,\r\n        setInput2,\r\n        input2,\r\n        children\r\n    }\r\n) => {\r\n\r\n    useEffect(()=>{\r\n        if(setInput1 && input1) {setInput1(input1)}\r\n        if(setInput2 && input2) {setInput2(input2)}\r\n        // return setCardQuestion && setCardQuestion('')\r\n    },[input1,input2])\r\n\r\n    return <>\r\n        <div className={s.backgraund} onClick={() => showModal(false)}></div>\r\n        <div className={s.modal}>\r\n            <i className={`${s.icon} icon-close`} onClick={() => showModal(false)}></i>\r\n            {children}\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default Modal","import React, {useEffect, useState} from \"react\";\r\nimport Modal from \"./Modal\";\r\nimport SuperButton from \"../common/c2-SuperButton/SuperButton\";\r\nimport {CardsType} from \"../../redux/cards-reducer\";\r\nimport {CardReqType} from \"../../types/entities\";\r\n\r\ntype ModalContainerPropsType = {\r\n    name: string\r\n    disabled?: boolean\r\n    setInput1?: (cardQuestion: string)=>void\r\n    input1?: string\r\n    setInput2?: (cardAnswer: string)=>void\r\n    input2?: string\r\n\r\n}\r\n\r\nconst ModalContainer: React.FC<ModalContainerPropsType> = (\r\n    {\r\n        name,\r\n        disabled,\r\n        children,\r\n        setInput1,\r\n        input1,\r\n        setInput2,\r\n        input2,\r\n    }\r\n) => {\r\n    const [showModal, setShowModal] = useState(false)\r\n\r\n\r\n    return <>\r\n        <SuperButton disabled={disabled} onClick={() => setShowModal(true)}>{name}</SuperButton>\r\n        {showModal &&\r\n        <Modal\r\n            showModal={setShowModal}\r\n            input1 = {input1}\r\n            setInput1 = {setInput1}\r\n            input2 = {input2}\r\n            setInput2 = {setInput2}>\r\n            {children}\r\n        </Modal>}\r\n    </>\r\n}\r\n\r\nexport default ModalContainer","import React, {useState} from \"react\";\r\nimport SuperInputText from \"../common/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../common/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../common/c3-SuperCheckbox/SuperCheckbox\";\r\nimport s from \"./Test.module.css\"\r\nimport ModalContainer from \"../Modals/ModalContainer\";\r\n\r\nconst Test: React.FC<any> = (props) => {\r\n    const [addPackName, setAddPackName] = useState('')\r\n        return <div className={s.wrapper}>\r\n            <h1>Test</h1>\r\n            <SuperInputText/>\r\n            <SuperCheckbox>Запомнить</SuperCheckbox>\r\n            <SuperButton>Отправить</SuperButton>\r\n            <ModalContainer name={'Добавить колоду'}>\r\n                <h3>Добавить новую колоду</h3>\r\n                <SuperInputText\r\n                    value={addPackName}\r\n                    onChangeText={setAddPackName}\r\n                    placeholder={'название колоды'}/>\r\n                <SuperButton\r\n                onClick={()=>{alert(addPackName)}}>Добавить</SuperButton>\r\n            </ModalContainer>\r\n        </div>\r\n}\r\n\r\nexport default Test","import React from 'react'\nimport s from './Error404.module.css'\n\nfunction Error404() {\n    return (\n        <div className={s.container}>\n            <img src=\"https://image.freepik.com/free-vector/404-error-with-character-error-design-template-website_114341-24.jpg\" alt=\"Error 404\"/>\n        </div>\n    )\n}\n\nexport default Error404\n","import {DispathActionType, PacksReqType, PacksType} from \"../types/entities\";\r\nimport {packsAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setCardPacks, setCurrentPage, setTotalCardPacksCount} from \"./packs-reducer\";\r\nimport {setIsLoadingAC} from \"./auth-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./store\";\r\n\r\n\r\nconst initialState = {\r\n    packName: '',\r\n    min: 0,\r\n    max: 40,\r\n    sortPacks: 0,\r\n    page: 1,\r\n    pageCount: 40,\r\n    user_id: '',\r\n    isMyPacks: false\r\n}\r\n\r\nexport const packsReqReducer = (state: PacksReqType = initialState, action: DispathActionType): PacksReqType => {\r\n    switch (action.type) {\r\n        case \"packs-req/SET_DATA_PACKS\":\r\n            return {...state, ...action.data}\r\n        case \"packs-req/RESET_DATA_PACKS\":\r\n            return {\r\n                packName: '',\r\n                min: 0,\r\n                max: 40,\r\n                sortPacks: 0,\r\n                page: 1,\r\n                pageCount: 40,\r\n                isMyPacks: false,\r\n                user_id: ''\r\n            }\r\n        case \"packs-req/SET_IS_MY_PACK\":\r\n            return {...state, isMyPacks: action.checked, user_id:action.userId }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setDataPack = (data: PacksReqType) => {\r\n    return {\r\n        type: \"packs-req/SET_DATA_PACKS\",\r\n        data\r\n    } as const\r\n}\r\n\r\nexport const resetDataPack = () => {\r\n    return {\r\n        type: \"packs-req/RESET_DATA_PACKS\",\r\n    } as const\r\n}\r\n\r\nexport const setIsMyPack = (checked:boolean, userId: string) => {\r\n    return {\r\n        type: \"packs-req/SET_IS_MY_PACK\",\r\n        checked,\r\n        userId\r\n    } as const\r\n}\r\n\r\n//Thunk\r\nexport const getPacksReqTC = (data: PacksReqType) => (dispatch: Dispatch<DispathActionType>, getState:()=>AppStateType) => {\r\n    dispatch(setDataPack(data))\r\n   const state  = getState().packsReq\r\n    dispatch(setIsLoadingAC(true))\r\n    // const userId = initialState.isMyPacks?initialState.user_id:''\r\n    // packsAPI.getPacks({...initialState, ...data, user_id:userId})\r\n    // packsAPI.getPacks({...initialState, ...data})\r\n    packsAPI.getPacks({...state, ...data})\r\n        .then((res) => {\r\n            dispatch(setCardPacks(res.data.cardPacks))\r\n            dispatch(setCurrentPage(res.data.page))\r\n            dispatch(setTotalCardPacksCount(res.data.cardPacksTotalCount))\r\n            dispatch(setIsLoadingAC(false))\r\n\r\n        })\r\n}\r\n\r\n\r\n\r\n","import {CardsType, DispathActionType, NewPackType, PacksReqType, PacksType} from \"../types/entities\";\r\nimport {packsAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoadingAC} from \"./auth-reducer\";\r\nimport {getPacksReqTC} from \"./packs-request-reducer\";\r\nimport {AppStateType} from \"./store\";\r\n\r\n\r\nconst initialState = {\r\n    cardPacks: [],\r\n    cardPacksTotalCount: 14,//totalUsersCount\r\n    maxCardsCount: 6,\r\n    minCardsCount: 0,\r\n    page: 1, //currentPage\r\n    pageCount: 20, //pagesSize\r\n    isMyPacks: false,\r\n    user_id: ''\r\n}\r\n\r\nexport const packsReducer = (state: PacksType = initialState, action: DispathActionType): PacksType => {\r\n    switch (action.type) {\r\n        case \"packs/SET_CARD_PACKS\":\r\n            return {...state, cardPacks: action.cardPacks} //[...action.cardPacks]\r\n        case \"packs/SET_TOTAL_CARD_PACKS_COUNT\":\r\n            return {...state, cardPacksTotalCount: action.cardPacksTotalCount}\r\n        case \"packs/SET_CURRENT_PAGE\":\r\n            return {...state, page: action.currentPage}\r\n        // case \"packs/SET_DATA_PACKS\":\r\n        //     return  {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setCardPacks = (cardPacks: Array<CardsType>) => {\r\n    return {\r\n        type: \"packs/SET_CARD_PACKS\",\r\n        cardPacks\r\n    } as const\r\n}\r\n\r\nexport const setTotalCardPacksCount = (cardPacksTotalCount: number) => {\r\n    return {\r\n        type: \"packs/SET_TOTAL_CARD_PACKS_COUNT\",\r\n        cardPacksTotalCount\r\n    } as const\r\n}\r\n\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: \"packs/SET_CURRENT_PAGE\",\r\n        currentPage\r\n    } as const\r\n}\r\n\r\n// export const setDataPack = (data:PacksReqType) => {\r\n//     return{\r\n//         type: \"packs/SET_DATA_PACKS\"\r\n//     } as const\r\n// }\r\n\r\n//Thunk\r\n// export const getPacksTC = (page: number, pageCount: number, user_id:string) => (dispatch: Dispatch<DispathActionType>) => {\r\n//     packsAPI.getPacks({page, pageCount, user_id})\r\nexport const getPacksTC = (data:PacksReqType) => (dispatch: Dispatch<DispathActionType>) => {\r\n\r\n    packsAPI.getPacks({...data})\r\n        .then((res) => {\r\n            dispatch(setCardPacks(res.data.cardPacks))\r\n            dispatch(setCurrentPage(res.data.page))\r\n            dispatch(setTotalCardPacksCount(res.data.cardPacksTotalCount))\r\n        })\r\n}\r\n\r\nexport const addCardsPack = (data:NewPackType) => (dispatch: (getPacksReqTC: (dispatch: Dispatch<DispathActionType>,getState:()=>AppStateType) => void) => void & Dispatch<DispathActionType>) => {\r\n    packsAPI.addPack({...data})\r\n        .then(() => {\r\n            dispatch(getPacksReqTC({}))\r\n            // dispatch(setCardPacks(res.data.cardPacks))\r\n            // dispatch(setTotalCardPacksCount(res.data.cardPacksTotalCount))\r\n        })\r\n}\r\n\r\nexport const deleteCardsPack = (id: string) => (dispatch: (getPacksReqTC: (dispatch: Dispatch<DispathActionType>, getState:()=>AppStateType) => void) => void) => {\r\n    packsAPI.deletePack(id)\r\n        .then(() => {\r\n            dispatch(getPacksReqTC({}))\r\n        })\r\n}\r\n\r\nexport const updateCardsPack = (id: string,newNamePack: string) => (dispatch: (getPacksReqTC: (dispatch: Dispatch<DispathActionType>,getState:()=>AppStateType) => void) => void) => {\r\n    packsAPI.updatePack(id, newNamePack)\r\n        .then(() => {\r\n            dispatch(getPacksReqTC({}))\r\n        })\r\n}\r\n\r\n//Types\r\n// export type CardPacksType = {\r\n//     _id: string\r\n//     user_id: string\r\n//     name: string\r\n//     path: string\r\n//     cardsCount: number\r\n//     grade: number\r\n//     shots: number\r\n//     rating: number\r\n//     type: string\r\n//     created: string\r\n//     updated: string\r\n//     __v: number\r\n// }\r\n//\r\n// export type CardPacksPageType = {\r\n//     cardPacks: Array<CardPacksType>\r\n//     cardPacksTotalCount: number\r\n//     maxCardsCount: number\r\n//     minCardsCount: number\r\n//     page: number\r\n//     pageCount: number\r\n//     isMyPacks?: boolean\r\n//     user_id?: string\r\n// }\r\n\r\n","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport s from '../c8-SuperDoubleRange/SuperDoubleRange.module.css'\r\n\r\n\r\ntype SuperDoubleRangePropsType = {\r\n    onChangeRange?: (value: [number, number]) => void\r\n    value?: [number, number]\r\n    step?: number\r\n    // min, max, step, disable, ...\r\n}\r\n\r\nconst AirbnbSlider = withStyles({\r\n    root: {\r\n        color: '#52af77', //цвет слайдера\r\n        height: 3,\r\n        padding: '13px 0',\r\n    },\r\n    thumb: {\r\n        height: 27,\r\n        width: 27,\r\n        backgroundColor: '#fff',\r\n        border: '2px solid currentColor',\r\n        marginTop: -10,\r\n        marginLeft: -13,\r\n        // boxShadow: '#ebebeb 0 2px 2px',\r\n        // '&:focus, &:hover, &$active': {\r\n        //     // boxShadow: '#ccc 0 2px 3px 1px',\r\n        //     // boxShadow: 'inherit',\r\n        // },\r\n        '& .bar': {\r\n            // display: inline-block !important;\r\n            height: 9,\r\n            width: 1,\r\n            backgroundColor: 'currentColor',\r\n            marginLeft: 1,\r\n            marginRight: 1,\r\n        },\r\n    },\r\n    active: {},\r\n    track: {\r\n        height: 8,\r\n        borderRadius: 4,\r\n    },\r\n    rail: {\r\n        // color: '#d8d8d8',\r\n        // opacity: 1,\r\n        height: 8,\r\n        borderRadius: 4,\r\n    },\r\n})(Slider);\r\n\r\nfunction AirbnbThumbComponent(props: any) {\r\n    return (\r\n        <span {...props}>\r\n      <span className=\"bar\"/>\r\n      <span className=\"bar\"/>\r\n      <span className=\"bar\"/>\r\n    </span>\r\n    );\r\n}\r\n\r\nconst SuperDoubleRange: React.FC<SuperDoubleRangePropsType> = (\r\n    {\r\n        onChangeRange,\r\n        value,\r\n        step,\r\n        // min, max, step, disable, ...\r\n        ...restProps\r\n    }\r\n)  => {\r\n\r\n    const handleChange = (event: React.SyntheticEvent<EventTarget>, newValue: any) => {\r\n        console.log(event.currentTarget)\r\n        onChangeRange && onChangeRange(newValue)\r\n\r\n    };\r\n\r\n    return (\r\n        <div className={s.root}>\r\n            <span className={s.text}>{value && value[0]}</span>\r\n            <AirbnbSlider\r\n                ThumbComponent={AirbnbThumbComponent}\r\n                getAriaLabel={(index) => (index === 0 ? 'Minimum price' : 'Maximum price')}\r\n                // defaultValue={[20, 40]}\r\n                value={value}\r\n                onChange={handleChange}\r\n            />\r\n            <span className={s.text}>{value && value[1]}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SuperDoubleRange;\r\n","import {CardsReqType, CardsResType, DispathActionType} from \"../types/entities\";\r\nimport {cardsAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoadingAC} from \"./auth-reducer\";\r\nimport {AppStateType} from \"./store\";\r\nimport {setCards, setCurrentPageCards, setTotalCardsCount} from \"./cards-reducer\";\r\nimport { AxiosResponse } from \"axios\";\r\n\r\n\r\nconst initialState = {\r\n    cardAnswer: '',\r\n    cardQuestion: '',\r\n    cardsPack_id: '',\r\n    min: 0,\r\n    max: 5,\r\n    sortCards: '0grade', //0grade\r\n    page: 1,\r\n    pageCount: 7\r\n}\r\n\r\nexport const cardsReqReducer = (state: CardsReqType = initialState, action: DispathActionType): CardsReqType => {\r\n    switch (action.type) {\r\n        case \"card-req/SET_DATA_CARDS\":\r\n            return {...state, ...action.data}\r\n        case \"card-req/RESET_DATA_CARDS\":\r\n            return {\r\n                cardAnswer: '',\r\n                cardQuestion: '',\r\n                cardsPack_id: '',\r\n                min: 0,\r\n                max: 5,\r\n                sortCards: '',\r\n                page: 1,\r\n                pageCount: 8\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setDataCards = (data: CardsReqType) => {\r\n    return {\r\n        type: \"card-req/SET_DATA_CARDS\",\r\n        data\r\n    } as const\r\n}\r\n\r\nexport const resetDataCards = () => {\r\n    return {\r\n        type: \"card-req/RESET_DATA_CARDS\",\r\n    } as const\r\n}\r\n\r\n//Thunk\r\nexport const getCardsReqTC = (data: CardsReqType) => (dispatch: Dispatch<DispathActionType>, getState: () => AppStateType) => {\r\n    const state = getState().cardsReq\r\n    // dispatch(setIsLoadingAC(true))\r\n    dispatch(setDataCards(data))\r\n    cardsAPI.getCards({...state, ...data})\r\n        .then((res:AxiosResponse<CardsResType>) => {\r\n            dispatch(setCards(res.data.cards))\r\n            dispatch(setCurrentPageCards(res.data.page))\r\n            dispatch(setTotalCardsCount(res.data.cardsTotalCount))\r\n            dispatch(setIsLoadingAC(false))\r\n        })\r\n}\r\n\r\n\r\n\r\n","import {CardReqType, CardsReqType, DispathActionType} from \"../types/entities\";\r\nimport {cardsAPI, packsAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport { getCardsReqTC } from \"./cards-request-reducer\";\r\nimport {AppStateType} from \"./store\";\r\nimport {setIsLoadingAC} from \"./auth-reducer\";\r\n\r\n\r\nconst initialState = {\r\n    cards: [],\r\n    cardsTotalCount: 18,\r\n    maxGrade: 5,\r\n    minGrade: 2.0100984354076568,\r\n    page: 1,\r\n    pageCount: 10,\r\n    packUserId: \"5eecf82a3ed8f700042f1186\"\r\n}\r\n\r\nexport const cardsReducer = (state: CardsPageType = initialState, action: DispathActionType): CardsPageType => {\r\n    switch (action.type) {\r\n        case \"cards/SET_CARDS\":\r\n            return {...state, cards: action.cards}\r\n        case \"cards/SET_TOTAL_CARDS_COUNT\":\r\n            return {...state, cardsTotalCount: action.cardsTotalCount}\r\n        case \"cards/SET_CURRENT_PAGE\":\r\n            return {...state, page: action.currentPage}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setCards = (cards: Array<CardsType>) => {\r\n    return {\r\n        type: \"cards/SET_CARDS\",\r\n        cards\r\n    } as const\r\n}\r\n\r\nexport const setTotalCardsCount = (cardsTotalCount: number) => {\r\n    return {\r\n        type: \"cards/SET_TOTAL_CARDS_COUNT\",\r\n        cardsTotalCount\r\n    } as const\r\n}\r\n\r\nexport const setCurrentPageCards = (currentPage: number) => {\r\n    return {\r\n        type: \"cards/SET_CURRENT_PAGE\",\r\n        currentPage\r\n    } as const\r\n}\r\n\r\n//Thunk\r\n// export const getCards = (page:number, pageSize:number, cardsPack_id:string) => (dispatch: Dispatch<DispathActionType>) => {\r\n//     cardsAPI.getCards(page, pageSize, cardsPack_id)\r\n//         .then((res) => {\r\n//             dispatch(setCards(res.data.cards))\r\n//             dispatch(setCurrentPageCards(res.data.page))\r\n//             dispatch(setTotalCardsCount(res.data.pageCount))\r\n//         })\r\n// }\r\n\r\nexport const addCard = (data:CardReqType) => (dispatch: (getCardsReqTC: (dispatch: Dispatch<DispathActionType>,getState:()=>AppStateType) => void) => void & Dispatch<DispathActionType>)=> {\r\n    cardsAPI.addCards(data)\r\n        .then(()=>{\r\n            // dispatch(getCards(initialState.page,initialState.pageCount,cardsPack_id))\r\n            dispatch(getCardsReqTC({}))\r\n        })\r\n}\r\n\r\nexport const deleteCard = (id:string,cardsPack_id:string) => (dispatch: (getCardsReqTC: (dispatch: Dispatch<DispathActionType>,getState:()=>AppStateType) => void) => void) => {\r\n    cardsAPI.deleteCards(id)\r\n        .then(()=>{\r\n            // dispatch(getCards(initialState.page,initialState.pageCount,cardsPack_id))\r\n            dispatch(getCardsReqTC({}))\r\n        })\r\n}\r\n\r\nexport const updateCard = (data:CardReqType) => (dispatch: (getCardsReqTC: (dispatch: Dispatch<DispathActionType>,getState:()=>AppStateType) => void) => void) => {\r\n    cardsAPI.updateCards(data)\r\n        .then(()=>{\r\n            // dispatch(getCards(initialState.page,initialState.pageCount,cardsPack_id))\r\n            dispatch(getCardsReqTC({}))\r\n        })\r\n}\r\n\r\nexport const updateGrade = (grade: number, cardId: string) => (dispatch: (getCardsReqTC: (dispatch: Dispatch<DispathActionType>,getState:()=>AppStateType) => void) => void) => {\r\n    cardsAPI.updateGrade(grade, cardId)\r\n        .then(()=>{\r\n            dispatch(getCardsReqTC({}))\r\n        })\r\n}\r\n\r\n//Types\r\nexport type CardsType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport type CardsPageType = {\r\n    cards: Array<CardsType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\n","import React, {SetStateAction, useEffect, useState} from \"react\";\r\nimport Modal from \"./../Modal\";\r\nimport {CardResType, CardsReqType} from \"../../../types/entities\";\r\nimport {Dispatch} from \"react\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CardsType, updateGrade} from \"../../../redux/cards-reducer\";\r\nimport SuperButton from \"../../common/c2-SuperButton/SuperButton\";\r\n\r\ntype PropsType = {\r\n\r\n    idPack: string\r\n    // isClose: Dispatch<SetStateAction<boolean>>\r\n    isClose: Dispatch<SetStateAction<string>>\r\n    getCards: (data: CardsReqType) => void\r\n\r\n    // cards: Array<CardResType>\r\n}\r\n\r\nconst grades = ['не знал', 'забыл', 'долго думал', 'перепутал', 'знал'];\r\n\r\nconst getCard = (cards: Array<CardResType>) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n    console.log('test: ', sum, rand, res)\r\n\r\n    return cards[res.id + 1];\r\n}\r\n\r\nconst ModalEducationContainer: React.FC<PropsType> = (\r\n    {\r\n        idPack,\r\n        isClose,\r\n        getCards\r\n        // cards\r\n    }\r\n) => {\r\n    const dispatch = useDispatch();\r\n    // const [showModal, setShowModal] = useState(false)\r\n    const [showAnswer, setShowAnswer] = useState(false)\r\n    const [first, setFirst] = useState<boolean>(true);\r\n    console.log(`idPack - ${idPack}`)\r\n\r\n    const cards = useSelector<AppStateType, Array<CardsType>>(state => state.cards.cards)\r\n    console.log(cards)\r\n\r\n    const [card, setCard] = useState<CardResType>({\r\n        answer: '',\r\n        question: '',\r\n        cardsPack_id: '',\r\n        grade: 0,\r\n        rating: 0,\r\n        shots: 0,\r\n        type: '',\r\n        user_id: '',\r\n        created: '',\r\n        updated: '',\r\n        __v: 0,\r\n        _id: '',\r\n    })\r\n    console.log(`card - ${card}`)\r\n\r\n    useEffect(() => {\r\n        // getCards({cardsPack_id: idPack})\r\n        if (first) {\r\n            getCards({cardsPack_id: idPack})\r\n            setFirst(false)\r\n        }\r\n        if (cards.length > 0) {setCard(getCard(cards))}\r\n    }, [idPack, cards, first])\r\n\r\n    const showModalHandler = (value: boolean) => {\r\n        return value ? '' : isClose('')\r\n    }\r\n\r\n    const onNext = () => {\r\n        setCard(getCard(cards));\r\n        setShowAnswer(false)\r\n    }\r\n\r\n    const setGrade = (grade: number) => {\r\n        dispatch(updateGrade(grade, card._id))\r\n        setCard({\r\n            answer: '',\r\n            question: '',\r\n            cardsPack_id: '',\r\n            grade: 0,\r\n            rating: 0,\r\n            shots: 0,\r\n            type: '',\r\n            user_id: '',\r\n            created: '',\r\n            updated: '',\r\n            __v: 0,\r\n            _id: '',\r\n        })\r\n        onNext()\r\n        // setShowAnswer (false)\r\n    }\r\n\r\n    return <>\r\n        <Modal showModal={showModalHandler}>\r\n            <h3>{card.question}</h3>\r\n            {showAnswer\r\n                ? <>\r\n                    <p style={{color: \"#505050\", fontStyle: \"italic\", fontWeight:\"lighter\"}}>{card.answer}</p>\r\n                    <div style={{display: \"flex\", marginBottom:\"25px\"}}>\r\n                        {grades.map((g, i) => (\r\n                            <SuperButton key={'grade-' + i}\r\n                                         style={{fontSize:\"18px\"}}\r\n                                         onClick={() => setGrade(i+1)}>{g}</SuperButton>\r\n                        ))}\r\n                    </div>\r\n                    <SuperButton\r\n                        // style={{marginLeft:\"100%\", transform: \"translate(-50%)\"}}\r\n                        onClick={() => onNext()}>Дальше</SuperButton>\r\n                </>\r\n                : <SuperButton\r\n                    onClick={() => setShowAnswer(true)}>Показать ответ</SuperButton>\r\n            }\r\n        </Modal>\r\n    </>\r\n}\r\n\r\nexport default ModalEducationContainer","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from \"./Packs.module.css\"\r\nimport {PATH} from \"../../Routes\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport SuperCheckbox from \"../common/c3-SuperCheckbox/SuperCheckbox\";\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport SuperDoubleRange from \"../common/c8-SuperDoubleRange/SuperDoubleRange\";\r\nimport SuperButton from \"../common/c2-SuperButton/SuperButton\";\r\nimport {\r\n    CardReqType,\r\n    CardResType,\r\n    CardsReqType,\r\n    CardsType,\r\n    NewPackType,\r\n    PacksReqType,\r\n    PacksType\r\n} from \"../../types/entities\";\r\nimport SuperInputText from \"../common/c1-SuperInputText/SuperInputText\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport ModalContainer from \"../Modals/ModalContainer\";\r\nimport ModalEducationContainer from \"../Modals/ModalEducation/ModalEducationContainer\";\r\n\r\n\r\ntype PropsType = {\r\n    cardPacks: Array<CardsType>\r\n    cardPacksTotalCount: number\r\n    currentPage: number\r\n    pagesSize: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    addCardsPack: (data: NewPackType) => void\r\n    deleteCardsPack: (id: string) => void\r\n    updateCardsPack: (id: string, packName: string) => void\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    isMyPacksHandler: (checked: boolean) => void\r\n    isMyPacks: boolean\r\n    changeFilter: (data: PacksReqType) => void\r\n    loading: boolean\r\n    resetFilter: () => void\r\n    userId: string\r\n    reqUserID: string\r\n    getCards: (data: CardsReqType) => void\r\n    cards: Array<CardResType>\r\n}\r\n\r\n// type PacksPropsType = PacksType & PropsType\r\n\r\nexport const Packs = (props: PropsType) => {\r\n    // const [checked, setChecked] = useState<boolean>(false)\r\n    const [value1, setValue1] = useState(props.minCardsCount);\r\n    const [value2, setValue2] = useState(props.maxCardsCount);\r\n    const [showModalEducation, setShowModalEducation] = useState('')\r\n    useEffect(() => {\r\n        setValue1(props.minCardsCount)\r\n        setValue2(props.maxCardsCount)\r\n    }, [props.minCardsCount, props.maxCardsCount])\r\n    const [packName, setPackName] = useState('')\r\n\r\n\r\n    let pageCount = Math.ceil(props.cardPacksTotalCount / props.pagesSize)\r\n    // let arrayPageCount: Array<number> = []\r\n    // for (let i = 1; i <= pageCount; i++) {\r\n    //     arrayPageCount.push(i)\r\n    // }\r\n    const handleChange = (event: React.FormEvent<EventTarget>, value: number) => {\r\n        props.onPageChanged(value)\r\n    };\r\n\r\n    const changeDoubleRange = (value: [number, number]) => {\r\n        setValue1(value[0])\r\n        setValue2(value[1])\r\n    }\r\n\r\n    const changeFilter = () => {\r\n        props.changeFilter({min: value1, max: value2, packName: packName})\r\n    }\r\n\r\n    const resetFilter = () => {\r\n        props.resetFilter()\r\n        setPackName('')\r\n    }\r\n\r\n    const addPackHandler = () => {\r\n        props.addCardsPack({name: packName})\r\n        setPackName('')\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <span>Мой id:{props.reqUserID}</span>\r\n            <SuperCheckbox\r\n                checked={props.isMyPacks}\r\n                onChangeChecked={(checked) => props.isMyPacksHandler(checked)}>Мои колоды</SuperCheckbox>\r\n            <Pagination count={pageCount} page={props.currentPage} onChange={handleChange} variant=\"outlined\"\r\n                        color=\"primary\"/>\r\n            <SuperDoubleRange\r\n                value={[value1, value2]}\r\n                onChangeRange={changeDoubleRange}\r\n            />\r\n            <SuperInputText\r\n                value={packName}\r\n                onChangeText={setPackName}\r\n                placeholder={'введите название колоды'}\r\n            />\r\n            <SuperButton\r\n                onClick={() => changeFilter()}>Применить</SuperButton>\r\n            <SuperButton\r\n                onClick={() => resetFilter()}>Reset</SuperButton>\r\n        </div>\r\n        {props.loading\r\n            ? <Preloader/>\r\n            : <table>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>CardsCount</th>\r\n                    <th>Update</th>\r\n                    <th>url</th>\r\n                    <th>\r\n                        <ModalContainer name={'Добавить колоду'}>\r\n                            <h3>Добавить новую колоду</h3>\r\n                            <SuperInputText\r\n                                value={packName}\r\n                                onChangeText={setPackName}\r\n                                placeholder={'название колоды'}/>\r\n                            <SuperButton\r\n                                onClick={addPackHandler}>Добавить</SuperButton>\r\n                        </ModalContainer>\r\n                    </th>\r\n                </tr>\r\n                {\r\n                    props.cardPacks.map(c => <tr key={c._id}>\r\n                        <th>{c.name}</th>\r\n                        <th>{c.cardsCount}</th>\r\n                        <th>{c.updated}</th>\r\n                        <th></th>\r\n                        <th>\r\n                            <ModalContainer name={'Delete'}\r\n                                            disabled={c.user_id !== props.userId ? true : false}>\r\n                                <h3>Вы действительно хотите удалить колоду и все ее содержимое?</h3>\r\n                                <SuperButton\r\n                                    onClick={() => c._id && props.deleteCardsPack(c._id)}>Применить</SuperButton>\r\n                            </ModalContainer>\r\n                            <ModalContainer name={'Update'}\r\n                                            disabled={c.user_id !== props.userId ? true : false}\r\n                                            input1 = {c.name}\r\n                                            setInput2 = {setPackName}>\r\n                                <h3>Обновить название колоды</h3>\r\n                                <SuperInputText\r\n                                    value={packName}\r\n                                    onChangeText={setPackName}\r\n                                    placeholder={'новое название колоды'}/>\r\n                                <SuperButton\r\n                                    onClick={() => c._id && props.updateCardsPack(c._id, packName)}>Применить</SuperButton>\r\n                            </ModalContainer>\r\n\r\n                            <NavLink to={`${PATH.CARDS}/${c._id}`}>Cards</NavLink>\r\n\r\n                            {/*<NavLink to={`${PATH.LEARN}/${c._id}`}>Learn</NavLink>*/}\r\n                            <SuperButton\r\n                                onClick={() =>c._id &&  setShowModalEducation(c._id)}\r\n                                disabled={c.cardsCount === 0 ? true : false}>Обучение</SuperButton>\r\n                            {showModalEducation === c._id?\r\n                                c._id && <ModalEducationContainer idPack={c._id} isClose={setShowModalEducation} getCards={props.getCards}/>\r\n                            :''}\r\n\r\n\r\n\r\n                        </th>\r\n                    </tr>)\r\n                }\r\n            </table>}\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default Packs","import {AppStateType} from \"../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addCardsPack,\r\n    deleteCardsPack,\r\n    updateCardsPack\r\n} from \"../../redux/packs-reducer\";\r\nimport Packs from \"./Packs\";\r\nimport {useEffect} from \"react\";\r\nimport {getAuthUserDataTC} from \"../../redux/auth-reducer\";\r\nimport {getPacksReqTC, resetDataPack, setIsMyPack} from \"../../redux/packs-request-reducer\";\r\nimport {CardReqType, CardsReqType, NewPackType, PacksReqType} from \"../../types/entities\";\r\nimport { getCardsReqTC } from \"../../redux/cards-request-reducer\";\r\n\r\n\r\n// type PropsType = {\r\n//     cardPacks: Array<CardPacksType>\r\n//     totalCardPacksCount: number\r\n//     currentPage: number\r\n//     pagesSize: number\r\n//     setCurrentPage: ()=>void,\r\n//     getCardPacks: ()=>void\r\n// }\r\n\r\nconst PacksContainer: React.FC<any> = (props) => {\r\n    useEffect(() => {\r\n        // props.getAuthUser()\r\n        props.me()\r\n        props.getPacks({page: props.currentPage, pageCount: props.pagesSize})\r\n\r\n\r\n    }, [])\r\n\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        // '6092ea40f1101a5af084112b'\r\n        props.getPacks({page: pageNumber, pageCount: props.pagesSize})\r\n    }\r\n\r\n\r\n    const isMyPacksHandler = (checked: boolean) => {\r\n        // props.setIsMyPack()\r\n        // const user_id = checked ? props.userId : ''\r\n        // props.getPacks(props.currentPage, props.pagesSize, user_id)\r\n        // props.getPacks({user_id})\r\n        if(checked){\r\n            props.setIsMyPack(true, props.userId)\r\n            // props.me()\r\n            // props.getPacks({user_id:props.userId})\r\n            props.getPacks({})\r\n        } else {\r\n            props.setIsMyPack(false, '')\r\n            // props.getPacks({user_id:''})\r\n            props.getPacks({})\r\n        }\r\n    }\r\n\r\n    // const changeFilterHandler = (min: number, max: number, packName: string) => {\r\n    //     props.getPacks({max, min, packName})\r\n    // }\r\n    const changeFilterHandler = (data:PacksReqType) => {\r\n        props.getPacks(data)\r\n    }\r\n\r\n    const getCardsHandler = (data: CardsReqType) => {\r\n        props.getCards(data)\r\n    }\r\n\r\n    const resetFilterHandler = () => {\r\n        props.resetFilter()\r\n        props.setIsMyPack(false)\r\n        props.getPacks({user_id:''})\r\n    }\r\n\r\n    const addCardsPackHandler = (data:NewPackType) => {\r\n        props.addPack(data)\r\n    }\r\n\r\n\r\n    return <div>\r\n        <Packs\r\n                cardPacks={props.cardPacks}\r\n                cardPacksTotalCount={props.cardPacksTotalCount}\r\n                currentPage={props.currentPage} //currentPage\r\n                pagesSize={props.pagesSize} //pagesSize\r\n                onPageChanged={onPageChanged}\r\n                addCardsPack={addCardsPackHandler}\r\n                deleteCardsPack={props.deletePack}\r\n                updateCardsPack={props.updatePack}\r\n                isMyPacksHandler={isMyPacksHandler}\r\n                isMyPacks={props.isMyPacks}\r\n                maxCardsCount={props.maxCardsCount}\r\n                minCardsCount={props.minCardsCount}\r\n                changeFilter={changeFilterHandler}\r\n                loading={props.loading}\r\n                resetFilter={resetFilterHandler}\r\n                userId={props.userId}\r\n                reqUserID={props.reqUserID}\r\n                getCards={getCardsHandler}\r\n                cards={props.cards}\r\n            />\r\n    </div>\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        cardPacks: state.cardPacks.cardPacks,\r\n        pagesSize: state.cardPacks.pageCount,\r\n        cardPacksTotalCount: state.cardPacks.cardPacksTotalCount,\r\n        currentPage: state.cardPacks.page,\r\n        userId: state.auth._id,\r\n        isMyPacks: state.packsReq.isMyPacks,\r\n        maxCardsCount: state.packsReq.max,\r\n        minCardsCount: state.packsReq.min,\r\n        loading: state.auth.isLoading,\r\n        reqUserID: state.packsReq.user_id,\r\n        cards: state.cards.cards,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    me: getAuthUserDataTC,\r\n    // setCurrentPage: setCurrentPage,\r\n    getPacks: getPacksReqTC,//VV\r\n    addPack: addCardsPack,\r\n    deletePack: deleteCardsPack,\r\n    updatePack: updateCardsPack,\r\n    setIsMyPack: setIsMyPack,\r\n    getAuthUser: getAuthUserDataTC,//VV\r\n    resetFilter: resetDataPack,//VV\r\n    getCards: getCardsReqTC\r\n})(PacksContainer)\r\n\r\n","import React, {useState} from \"react\";\r\nimport {CardsType} from \"../../../redux/cards-reducer\";\r\nimport s from \"./Cards.module.css\"\r\nimport SuperInputText from \"../../common/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../common/c2-SuperButton/SuperButton\";\r\nimport ModalContainer from \"../../Modals/ModalContainer\";\r\nimport {CardReqType} from \"../../../types/entities\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\n\r\n\r\nexport type CardsPropsType = {\r\n    cards: Array<CardsType>\r\n    cardsTotalCount: number\r\n    currentPage: number\r\n    pagesSize: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    addCard: (data: CardReqType) => void\r\n    deleteCard: (id: string) => void\r\n    updateCard: (data: CardReqType) => void\r\n    loading: boolean\r\n}\r\n\r\nexport const Cards = (props: CardsPropsType) => {\r\n    const [cardQuestion, setCardQuestion] = useState('')\r\n    const [cardAnswer, setCardAnswer] = useState('')\r\n    let pageCount = Math.ceil(props.cardsTotalCount / props.pagesSize)\r\n    let arrayPageCount: Array<number> = []\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        arrayPageCount.push(i)\r\n    }\r\n\r\n    const addCardHandler = () => {\r\n        props.addCard({\r\n            answer: cardAnswer,\r\n            question: cardQuestion\r\n        })\r\n        setCardQuestion('')\r\n        setCardAnswer('')\r\n    }\r\n\r\n    const updateCardHandler = (id: string) => {\r\n        props.updateCard({\r\n            _id: id, answer: cardAnswer,\r\n            question: cardQuestion\r\n        })\r\n        setCardQuestion('')\r\n        setCardAnswer('')\r\n    }\r\n\r\n\r\n    const handleChange = (event: React.FormEvent<EventTarget>, value: number) => {\r\n        props.onPageChanged(value)\r\n    };\r\n\r\n\r\n    return <div>\r\n        <div>\r\n            {/*{arrayPageCount.map(p => {*/}\r\n            {/*    return <span className={props.currentPage === p ? s.selectedPage : ''}*/}\r\n            {/*                 onClick={() => props.onPageChanged(p)}>{p}</span>*/}\r\n            {/*})}*/}\r\n            <Pagination count={pageCount} page={props.currentPage} onChange={handleChange} variant=\"outlined\"\r\n                        color=\"primary\"/>\r\n        </div>\r\n        {props.loading\r\n            ? <Preloader/>\r\n            : <table>\r\n                <tr>\r\n                    <th>Question</th>\r\n                    <th>Answer</th>\r\n                    <th>Grade</th>\r\n                    <th>Update</th>\r\n                    <th>URL</th>\r\n                    <th>\r\n                        <ModalContainer name={'Добавить карту'}>\r\n                            <h3>Добавить новую карту</h3>\r\n                            <SuperInputText\r\n                                value={cardQuestion}\r\n                                onChangeText={setCardQuestion}\r\n                                placeholder={'напишите вопрос'}/>\r\n                            <SuperInputText\r\n                                value={cardAnswer}\r\n                                onChangeText={setCardAnswer}\r\n                                placeholder={'напишите вопрос'}/>\r\n                            <SuperButton\r\n                                onClick={addCardHandler}>Добавить</SuperButton>\r\n                        </ModalContainer>\r\n                    </th>\r\n                </tr>\r\n                {\r\n                    props.cards.map(c => <tr key={c._id}>\r\n                        <th>{c.question}</th>\r\n                        <th>{c.answer}</th>\r\n                        <th>{c.grade}</th>\r\n                        <th>{c.updated}</th>\r\n                        <th></th>\r\n                        <th>\r\n\r\n                            <ModalContainer name={'Delete'}>\r\n                                <h3>Вы действительно хотите удалить карту?</h3>\r\n                                <SuperButton\r\n                                    onClick={() => c._id && props.deleteCard(c._id)}>Применить</SuperButton>\r\n                            </ModalContainer>\r\n                            <ModalContainer name={'Update'}\r\n                                            input1 = {c.question}\r\n                                            setInput1 = {setCardQuestion}\r\n                                            input2 = {c.answer}\r\n                                            setInput2 = {setCardAnswer}>\r\n                                <h3>Изменить карту</h3>\r\n                                <SuperInputText\r\n                                    value={cardQuestion}\r\n                                    onChangeText={setCardQuestion}/>\r\n                                <SuperInputText\r\n                                    value={cardAnswer}\r\n                                    onChangeText={setCardAnswer}/>\r\n                                <SuperButton\r\n                                    onClick={() => updateCardHandler(c._id)}>Применить</SuperButton>\r\n                            </ModalContainer>\r\n                            {/*<button onClick={() => {*/}\r\n                            {/*    props.updateCard(c._id)*/}\r\n                            {/*}}>update*/}\r\n                            {/*</button>*/}\r\n                        </th>\r\n                    </tr>)\r\n                }\r\n            </table>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Cards","import {AppStateType} from \"../../../redux/store\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport Cards from \"./Cards\";\r\nimport {useEffect} from \"react\";\r\nimport {addCard, deleteCard, updateCard, setCurrentPageCards, CardsType} from \"../../../redux/cards-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {getCardsReqTC} from \"../../../redux/cards-request-reducer\";\r\nimport {CardReqType} from \"../../../types/entities\";\r\nimport {setIsLoadingAC} from \"../../../redux/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    cards: Array<CardsType>\r\n    cardsTotalCount: number\r\n    currentPage: number\r\n    pagesSize: number\r\n    getCards: (page: number, pageSize: number) => void,\r\n    onPageChanged: (pageNumber: number) => void\r\n    addCard: (data:CardReqType) => void\r\n    deleteCard: (id: string) => void\r\n    updateCard: (id: string) => void\r\n}\r\n\r\nconst CardsContainer: React.FC<any> = (props) => {\r\n    const {id} = useParams<{ id?: string }>()\r\n    useEffect(() => {\r\n        props.getCards({cardsPack_id:id, page:props.currentPage, pageCount:props.pagesSize})\r\n    }, [])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        props.getCards({page: pageNumber, pageCount: props.pagesSize, cardsPack_id:id})\r\n    }\r\n\r\n    const addCardHandler = (data:CardReqType) => {\r\n        props.addCard({cardsPack_id:id, ...data})\r\n    }\r\n\r\n    const deleteCardHandler = (idCard: string) => {\r\n        props.deleteCard(idCard, id)\r\n    }\r\n\r\n    const updateCardHandler = (data:CardReqType) => {\r\n        props.updateCard({...data})\r\n    }\r\n\r\n    return <div>\r\n        <Cards\r\n            cards={props.cards}\r\n            cardsTotalCount={props.cardsTotalCount}\r\n            currentPage={props.currentPage}\r\n            pagesSize={props.pagesSize}\r\n            onPageChanged={onPageChanged}\r\n            addCard={addCardHandler}\r\n            deleteCard={deleteCardHandler}\r\n            updateCard={updateCardHandler}\r\n            loading={props.loading}\r\n        />\r\n    </div>\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        cards: state.cards.cards,\r\n        pagesSize: state.cards.pageCount,\r\n        cardsTotalCount: state.cards.cardsTotalCount,\r\n        currentPage: state.cards.page,\r\n        loading: state.auth.isLoading\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    setCurrentPage: setCurrentPageCards,\r\n    getCards: getCardsReqTC,\r\n    addCard: addCard,\r\n    deleteCard: deleteCard,\r\n    updateCard: updateCard\r\n})(CardsContainer)\r\n\r\n","import React from 'react'\nimport {Switch, Route, Redirect} from 'react-router-dom'\nimport Login from \"./coponents/Login/Login\";\nimport Registration from \"./coponents/Registration/Registration\";\nimport Profile from \"./coponents/Profile/Profile\";\nimport RecoveryPassword from \"./coponents/RecoveryPassword/RecoveryPassword\";\nimport EnterNewPassword from \"./coponents/EnterNewPassword/EnterNewPassword\";\nimport Test from \"./coponents/Test/Test\";\nimport Error404 from \"./coponents/404/Error404\";\nimport CardPacksContainer from \"./coponents/Packs/PacksContainer\";\nimport CardsContainer from './coponents/Packs/Cards/CardsContainer';\nimport EducationContainer from './coponents/Packs/Education/EducationContainer';\n\nexport const PATH = {\n    LOGIN: \"/login\",\n    REGISTRATION: \"/registration\",\n    PROFILE: \"/profile\",\n    RECOVERY_PASSWORD: \"/recovery_password\",\n    ENTER_NEW_PASSWORD: \"/enter_new_password\",\n    TEST: \"/test\",\n    CARD_PACKS: \"/card_packs\",\n    CARDS: \"/cards\",\n    LEARN: \"/learn\"\n}\n\nconst Routes = () => {\n    return (\n        <Switch>\n            < Route path={'/'} exact render={() => <Redirect to={PATH.TEST}/>}/>\n            < Route path={PATH.LOGIN} render={() => <Login/>}/>\n            < Route path={PATH.REGISTRATION} render={() => <Registration/>}/>\n            < Route path={PATH.PROFILE} render={() => <Profile/>}/>\n            < Route path={PATH.RECOVERY_PASSWORD} render={() => <RecoveryPassword/>}/>\n            {/*< Route path={PATH.ENTER_NEW_PASSWORD || (PATH.ENTER_NEW_PASSWORD  + '/:token')} render={() => <EnterNewPassword/>}/>*/}\n            < Route path={`${PATH.ENTER_NEW_PASSWORD}/:token`} render={() => <EnterNewPassword/>}/>\n            < Route path={PATH.TEST} render={() => <Test/>}/>\n            < Route path={PATH.CARD_PACKS} render={() => <CardPacksContainer/>}/>\n            < Route path={`${PATH.CARDS}/:id`} render={() => <CardsContainer/>}/>\n            {/*< Route path={PATH.LEARN || (PATH.LEARN + '/:id')} render={() => <EducationContainer/>}/>*/}\n            < Route render={() => <Error404/>}/>\n        </Switch>\n    )\n}\n\nexport default Routes\n","import React from 'react';\r\nimport s from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../Routes\";\r\n\r\nconst Navbar = () => {\r\n    return <nav className={s.nav}>\r\n        <div className={s.item}>\r\n            <NavLink to={PATH.LOGIN} activeClassName={s.active}>Login</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to={PATH.PROFILE} activeClassName={s.active}>Profile</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to={PATH.REGISTRATION} activeClassName={s.active}>Registration</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to={PATH.RECOVERY_PASSWORD} activeClassName={s.active}>Recovery</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to={PATH.ENTER_NEW_PASSWORD} activeClassName={s.active}>Set password</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to={PATH.CARD_PACKS} activeClassName={s.active}>Card Packs</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to={PATH.TEST} activeClassName={s.active}>Test</NavLink>\r\n        </div>\r\n    </nav>\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport {HashRouter} from 'react-router-dom';\nimport './App.css';\nimport Navbar from './coponents/Navbar/Navbar';\nimport Routes from \"./Routes\";\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <HashRouter>\n                <Navbar/>\n                <Routes/>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {packsReducer} from \"./packs-reducer\";\r\nimport {cardsReducer} from \"./cards-reducer\";\r\nimport {packsReqReducer} from \"./packs-request-reducer\";\r\nimport {cardsReqReducer} from \"./cards-request-reducer\";\r\nimport {recoveryPasReducer} from \"./recoveryPass-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers(\r\n    {\r\n        auth: authReducer,\r\n        cardPacks: packsReducer,\r\n        cards: cardsReducer,\r\n        packsReq: packsReqReducer,\r\n        cardsReq: cardsReqReducer,\r\n        recoveryPas: recoveryPasReducer\r\n    }\r\n)\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      {/*<BrowserRouter>*/}\n      <Provider store={store}>\n          <App/>\n      </Provider>\n      {/*</BrowserRouter>*/}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}